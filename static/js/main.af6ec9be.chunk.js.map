{"version":3,"sources":["components/pages/ListaPokemon.jsx","components/Pagination.jsx","App.js","index.js"],"names":["ListaPokemon","pokemon","map","p","key","Pagination","gotoNextPage","gotoPrevPage","onClick","App","useState","setPokemon","currentPageUrl","setCurrentPageUrl","nextPageUrl","setNextPageUrl","prevPageUrl","setPrevPageUrl","loading","setLoading","useEffect","cancel","axios","get","cancelToken","CancelToken","c","then","res","console","log","data","results","next","previous","name","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAEe,SAASA,EAAT,GAAiC,IAAVC,EAAS,EAATA,QAErC,OACC,kBAAC,WAAD,KAECA,EAAQC,KAAI,SAAAC,GAAC,OACZ,yBAAKC,IAAKD,GAAIA,OCNH,SAASE,EAAT,GAAkD,IAA7BC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,aAEjD,OACC,6BACMA,GAAgB,4BAAQC,QAASD,GAAjB,YAChBD,GAAgB,4BAAQE,QAASF,GAAjB,S,oBC8CTG,MAhDf,WAAgB,IAAD,EAEgBC,mBAAS,IAFzB,mBAEPT,EAFO,KAEEU,EAFF,OAG8BD,mBAAS,qCAHvC,mBAGPE,EAHO,KAGSC,EAHT,OAIwBH,qBAJxB,mBAIPI,EAJO,KAIMC,EAJN,OAKwBL,qBALxB,mBAKPM,EALO,KAKMC,EALN,OAMgBP,oBAAS,GANzB,mBAMPQ,EANO,KAMEC,EANF,KAkCb,OAzBDC,qBAAU,WAET,IAAIC,EAWJ,OAZAF,GAAW,GAEXG,IAAMC,IAAIX,EAAe,CACxBY,YAAa,IAAIF,IAAMG,aAAY,SAAAC,GAAC,OAAIL,EAASK,OAC/CC,MAAK,SAAAC,GACPT,GAAW,GACXU,QAAQC,IAAIF,EAAIG,KAAKC,SACrBjB,EAAea,EAAIG,KAAKE,MACxBhB,EAAeW,EAAIG,KAAKG,UACxBvB,EAAWiB,EAAIG,KAAKC,QAAQ9B,KAAI,SAAAC,GAAC,OAAIA,EAAEgC,YAGjC,kBAAMd,OACV,CAACT,IAWAM,EAAgB,aAGpB,oCACC,kBAAClB,EAAD,CAAcC,QAASA,IACvB,kBAACI,EAAD,CACCC,aAAcQ,EAdjB,WACCD,EAAkBC,IAa2B,KACrCP,aAAcS,EAXtB,WACAH,EAAkBG,IAUiC,SC1CrDoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.af6ec9be.chunk.js","sourcesContent":["import React,{Fragment} from 'react'\r\n\r\nexport default function ListaPokemon({pokemon}){\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t{\r\n\t\t\tpokemon.map(p =>(\r\n\t\t\t\t<div key={p}>{p}</div>\r\n\r\n\t\t\t))\r\n\r\n\t\t}\r\n\t\t</Fragment>\r\n\r\n\t)\r\n}","import React from 'react'\r\n\r\nexport default function Pagination({gotoNextPage, gotoPrevPage}){\r\n\r\n\treturn (\r\n\t\t<div>\r\n      \t{gotoPrevPage && <button onClick={gotoPrevPage}>Previous</button>}\r\n      \t{gotoNextPage && <button onClick={gotoNextPage}>Next</button>}\r\n    </div>\r\n\t)\r\n}","import React,{Fragment, useState, useEffect} from 'react';\nimport ListaPokemon from './components/pages/ListaPokemon'\nimport Pagination from './components/Pagination'\nimport axios from 'axios'\n\nfunction App() {\n\n\tconst [pokemon, setPokemon] = useState([]);\n\tconst [currentPageUrl, setCurrentPageUrl] = useState(\"https://pokeapi.co/api/v2/pokemon\");\n\tconst [nextPageUrl, setNextPageUrl] = useState();\n\tconst [prevPageUrl, setPrevPageUrl] = useState();\n\tconst [loading, setLoading] = useState(true);\n\n\t// --------------------\n\tuseEffect(()=>{\n\t\tsetLoading(true)\n\t\tlet cancel\n\t\taxios.get(currentPageUrl,{\n\t\t\tcancelToken: new axios.CancelToken(c => cancel = c)\t\t\t\n\t\t}).then(res =>{\n\t\t\tsetLoading(false)\n\t\t\tconsole.log(res.data.results);\n\t\t\tsetNextPageUrl(res.data.next)\n\t\t\tsetPrevPageUrl(res.data.previous)\n\t\t\tsetPokemon(res.data.results.map(p => p.name))\n\t\t})\n\n\t return () => cancel()\n  }, [currentPageUrl])\n\n\n\tfunction gotoNextPage() {\n\t\tsetCurrentPageUrl(nextPageUrl)\n\t  }\n\n\t function gotoPrevPage() {\n\t\tsetCurrentPageUrl(prevPageUrl)\n\t }\n\n  if (loading) return \"Loading...\"\n\t// --------------------\n\treturn (\n\t\t<>\n\t\t\t<ListaPokemon pokemon={pokemon}/>\n\t\t\t<Pagination \n\t\t\t\tgotoNextPage={nextPageUrl ? gotoNextPage : null}\n        \t\tgotoPrevPage={prevPageUrl ? gotoPrevPage : null}\n\t\t\t/>\n\t\t\n\t\t</>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n \nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}